/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/train.py:18: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  X_mb = torch.tensor(X_mb, dtype=torch.float32, device=params["device"])
/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/train.py:19: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  T_mb = torch.tensor(T_mb, dtype=torch.float32, device=params["device"])
/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/TimeGAN.py:437: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  X=torch.tensor(X, dtype=torch.float32, device=self.device)
Traceback (most recent call last):
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/main.py", line 196, in <module>
    main(params)
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/main.py", line 64, in main
    embedding_trainer(
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/train.py", line 21, in embedding_trainer
    _, E_loss0, E_loss_T0 = model(X=X_mb, T=T_mb, Z=None, obj="autoencoder")
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/TimeGAN.py", line 445, in forward
    loss = self._recovery_forward(X, T)
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/TimeGAN.py", line 240, in _recovery_forward
    X_tilde = self.recovery(H, T)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/content/drive/MyDrive/UM_Thesis/MTS_Co_Clustering/TGAN/TimeGAN.py", line 158, in forward
    linear_recovered = self.fc(output)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/linear.py", line 116, in forward
    return F.linear(input, self.weight, self.bias)
KeyboardInterrupt